fixedsize = true,
width = 0.9,fontsize=7,fillcolor=MediumPurple]
Classical; ML_Inspired; Lower Dimension
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired Lower Dimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor=OrangeRed]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor=MediumPurple]
Classical; ML_Inspired; LowerDimension
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired Lower Dimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor=OrangeRed]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor=MediumPurple]
Classical; ML_Inspired; LowerDimension
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple]
Classical; ML_Inspired; LowerDimension
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical; ML_Inspired; LowerDimension
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical; ML_Inspired; LowerDimension
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
node[tooltip = IV+MutualInformation+ChiSquare]
Classical
node[tooltip=L1+L2]
ML_Inspired
node[tooltip=PCA+MDS-PLS+LDA]
LowerDimension
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled,tooltip=hi]
Classical;ML_Inspired;LowerDimension
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled,tooltip=true]
Classical;ML_Inspired;LowerDimension
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
ML_Inspired;LowerDimension
node[tooltip=IV+ChiSquare+MutualInfo]
Classical
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
DRT_ZOO->Classical [tooltip=IV+ChiSquare+MutualInformation]
DRT_ZOO->ML_Inspired [tooltip=L1+L2]
DRT_ZOO->LowerDimension [tooltip=PCA]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
DRT_ZOO->Classical [tooltip=IVChiSquareMutualInformation]
DRT_ZOO->ML_Inspired [tooltip=L1L2]
DRT_ZOO->LowerDimension [tooltip=PCA]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
DRT_ZOO->Classical [tooltip=IV ChiSquare MutualInformation]
DRT_ZOO->ML_Inspired [tooltip=L1 L2]
DRT_ZOO->LowerDimension [tooltip=PCA]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
DRT_ZOO->Classical [tooltip='Used in']
DRT_ZOO->ML_Inspired [tooltip=L1L2]
DRT_ZOO->LowerDimension [tooltip=PCA]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
DRT_ZOO->Classical [tooltip='IV ChiSquare Mutual Information']
DRT_ZOO->ML_Inspired [tooltip='L1 L2']
DRT_ZOO->LowerDimension [tooltip='PCA MDS PLS LDA']
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = diamond,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
IV;ChiSquare;MutualInformation;L1;L2;PCA;MDS;LDA;PLS
DRT_ZOO->Classical [tooltip='Variable selection while modelling']
DRT_ZOO->ML_Inspired [tooltip='Variable selection while modelling']
DRT_ZOO->LowerDimension [tooltip='Exploration and Variable Selection']
Classical->{IV ChiSquare MutualInformation}
ML_Inspired->{L1,L2}
LowerDimension->{PCA MDS PLS LDA}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = diamond,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
'IV Chisquare Mutual Information';'L1 L2'; 'PCA MDS PLS LDA'
DRT_ZOO->Classical [tooltip='Variable selection while modelling']
DRT_ZOO->ML_Inspired [tooltip='Variable selection while modelling']
DRT_ZOO->LowerDimension [tooltip='Exploration and Variable Selection']
Classical->'IV Chisquare Mutual Information'
ML_Inspired->'L1,L2'
LowerDimension->'PCA MDS PLS LDA'
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = diamond,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
'IV Chisquare Mutual Information';'L1 L2'; 'PCA MDS PLS LDA'
DRT_ZOO->Classical [tooltip='Variable selection while modelling']
DRT_ZOO->ML_Inspired [tooltip='Variable selection while modelling']
DRT_ZOO->LowerDimension [tooltip='Exploration and Variable Selection']
Classical->'IV Chisquare Mutual Information'
ML_Inspired->'L1 L2'
LowerDimension->'PCA MDS PLS LDA'
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = diamond,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
'IV Chisquare MI';'L1 L2'; 'PCA MDS PLS LDA'
DRT_ZOO->Classical [tooltip='Variable selection while modelling']
DRT_ZOO->ML_Inspired [tooltip='Variable selection while modelling']
DRT_ZOO->LowerDimension [tooltip='Exploration and Variable Selection']
Classical->'IV Chisquare MI'
ML_Inspired->'L1 L2'
LowerDimension->'PCA MDS PLS LDA'
}
")
rbind( c(0.2, 0.1, 0.15), c(0.1, 0.2, 0.25) )
?Sys.setenv
install.packages("randomForest")
library(randomForest)
?randomForest
Sys.setenv(PATH = paste("/home/ramius/anaconda2/bin", Sys.getenv("PATH"), sep=":"))
Sys.setenv(PATH = paste("/home/ramius/anaconda2/bin", Sys.getenv("PATH"), sep=":"))
?nb
Sys.setenv(PATH = paste("/home/ramius/anaconda2/bin", Sys.getenv("PATH"), sep=":"))
y=rep(5,10)
x=seq(1,10)
plot(x,y)
y=rep(5,10)
x=seq(1,10)
plot(x,y,type='l',col='blue')
y=rep(5,10)
x=seq(1,10)
plot(x,y,type='l',col='blue',jitter(y))
y=rep(5,10)
x=seq(1,10)
plot(x,jitter(y),type='l',col='blue')
y=rep(5,10)
x=seq(1,10)
plot(x,jitter(y),type='p',col='blue',ylim = c(0,7))
y=rep(5,10)
x=seq(1,10)
plot(x,jitter(y),type='p',col='blue',ylim = c(0,7),ylab = 'Y dim',xlab = 'X dim')
y=rep(5,10)
x=seq(1,10)
plot(x,jitter(y),type='p',col='blue',ylim = c(0,7),ylab = 'Y dim',xlab = 'X dim')
y=rep(5,10)
x=seq(1,10)
plot(x,jitter(y,3),type='p',col='blue',ylim = c(0,7),ylab = 'Y dim',xlab = 'X dim')
setwd('/media/ramius/New Volume/Work/Jigsaw Academy/Corporate Trainings/Bocconi/Batch 3/Online Sessions/DRT/DRT')
data=read.csv('authorship.csv')
data$target=ifelse(data$Author=='London',0,1)
table(data$target)
library(MASS)
names(data)
mod=lda(target~.,data[,-c(70,71)])
summary(mod)
mod$scaling
mod$N
mod$svd
mod$prior
table(data$target)/nrow(data)
dim(mod$scaling)
dim(mod$scaling%*%data[,-c(70,71,72)])
dim(mod$scaling%*%as.matrix(data[,-c(70,71,72)]))
dim(t(mod$scaling)%*%as.matrix(data[,-c(70,71,72)]))
as.matrix(data[,-c(70,71,72)])
dim(t(mod$scaling)%*%t(as.matrix(data[,-c(70,71,72)])))
t((t(mod$scaling)%*%t(as.matrix(data[,-c(70,71,72)]))))
projection=t((t(mod$scaling)%*%t(as.matrix(data[,-c(70,71,72)]))))
plot(projection)
plot(projection,col=data$target)
plot(projection)
plot(projection=col=as.factor(data$target))
plot(projection,col=as.factor(data$target))
author_pca=princomp(data[,-c(70,71,72)])
author_pca$loadings
?prcomp
plot(author_pca$x[,1],author_pca$x[,2])
points(data$target==1,col='red')
points(data$target==0,col='blue')
author_pca$x
author_pca
str(author_pca)
author_pca$scores
author_pca=princomp(data[,-c(70,71,72)])
data=read.csv('nyt.frame.csv')
nyt.pca = prcomp(data[,-1])
setwd('/media/ramius/New Volume/Work/Jigsaw Academy/Corporate Trainings/Bocconi/Batch 3/Online Sessions/DRT/DRT')
data=read.csv('authorship.csv')
data$target=ifelse(data$Author=='London',0,1)
author_pca=prcomp(data[,-c(70,71,72)])
plot(author_pca$x[,1],author_pca$x[,2])
points(author_pca$x[data$target==1],col='red')
points(author_pca$x[data$target==0],col='blue')
plot(author_pca$x[,1],author_pca$x[,2])
points(author_pca$x[data$target==1,1:2],col='red')
points(author_pca$x[data$target==0,1:2],col='blue')
setwd('E:\\Work\\Jigsaw Academy\\Corporate Trainings\\Bocconi\\Batch 3\\Online Sessions\\DRT\\DRT')
data=read.csv('Aquisition_Risk.csv')
names(data)
data=data[,-c(14,15)]
data=na.omit(data)
y=data$Good_Bad
x=data[-24]
library(entropy)
install.packages("entropy")
library(entropy)
mi.plugin(table(data$Good_Bad,data$grade))
MI<-function(x,y){
MI_Store<-1:length(x)
names(MI_Store)<-names(x)
for(i in 1:length(x)){
MI_Store[i]<- mi.plugin(table(y,x[[i]]))
}
MI_Store=data.frame(MutualInfo=sort(MI_Store,decreasing = T))
return(MI_Store)
}
MI(x=x,y=y)
library(smbinning)
install.packages("smbinning")
library(smbinning)
data$Target<-ifelse(data$Good_Bad=='Good',1,0)
smbinning(data,y="Target",x="loan_amnt",p=0.05)$ivtable
ivout<-smbinning(data,y="Target",x="loan_amnt",p=0.05)
smbinning.sql(ivout = ivout)
mnist_x=read.csv('mnist_x.csv',header = T)
mnist_y=read.csv('mnist_y.csv',header=F,col.names = 'Target')
y=ifelse(mnist_y$Target>7,1,0)
x=as.matrix(mnist_x)
library(glmnet)
install.packages("glmnet")
library(glmnet)
mod<-cv.glmnet(x,y,family='binomial',alpha=1)
plot(mod)
mod$lambda.min
mod$glmnet.fit
coef(mod,s=mod$lambda.min)
mod$lambda.1se
mod$glmnet.fit
summary(mod)
mod$nzero
e=exp(predict.cv.glmnet(mod,newx = x))
p=e/(1+e)
l=ifelse(p>0.5,1,0)
sum(l==y)/length(y)
data=read.csv('nyt.frame.csv')
colnames(data)[sample(ncol(data),30)]
signif(data[sample(nrow(data),5),sample(ncol(data),10)],3)
nyt.pca = prcomp(data[,-1])
str(nyt.pca)
nyt.latent.sem = nyt.pca$rotation
?prcomp
sdev[1:2]
nyt.pca$sdev[1:2]
signif(sort(nyt.latent.sem[,1],decreasing=TRUE)[1:30],2)
signif(sort(nyt.latent.sem[,1],decreasing=FALSE)[1:30],2)
signif(sort(nyt.latent.sem[,2],decreasing=TRUE)[1:30],2)
signif(sort(nyt.latent.sem[,2],decreasing=FALSE)[1:30],2)
plot(nyt.pca$x[,1:2],type="n")
points(nyt.pca$x[data[,"class.labels"]=="art",1:2],pch="A",col="red")
points(nyt.pca$x[data[,"class.labels"]=="music",1:2],pch="M",col="blue")
data=read.csv('authorship.csv')
data$target=ifelse(data$Author=='London',0,1)
library(MASS)
author_pca=prcomp(data[,-c(70,71,72)])
plot(author_pca$x[,1],author_pca$x[,2])
points(author_pca$x[data$target==1,1:2],col='red')
points(author_pca$x[data$target==0,1:2],col='blue')
mod=lda(target~.,data[,-c(70,71)])
summary(mod)
mod$scaling
projection=t((t(mod$scaling)%*%t(as.matrix(data[,-c(70,71,72)]))))
plot(projection,col=as.factor(data$target))
